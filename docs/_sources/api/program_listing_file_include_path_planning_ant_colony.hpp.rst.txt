
.. _program_listing_file_include_path_planning_ant_colony.hpp:

Program Listing for File ant_colony.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_path_planning_ant_colony.hpp>` (``include/path_planning/ant_colony.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef ANT_COLONY_H
   #define ANT_COLONY_H
   
   #include <unordered_map>
   
   #include "utils/utils.hpp"
   
   struct pair_hash {
     template <class T1, class T2>
     std::size_t operator()(const std::pair<T1, T2>& pair) const {
       return std::hash<T1>()(pair.first) ^ std::hash<T2>()(pair.second);
     }
   };
   
   class Ant {
    public:
     Ant(Node start = Node(0, 0), int id = 0);
     std::vector<Node> path_;
     bool found_goal_ = false;
     Node current_node_;
     Node previous_node_;
     int steps_ = 0, id_;
   };
   
   class AntColony {
    public:
     AntColony(const int n_ants = 10, const double alpha = 0.5,
               const double beta = 0.5, const double evap_rate = 0.5,
               const int iterations = 10, const double Q = 10.0);
   
     void PrintAntPath(Ant& ant) const;
   
     static void RemoveLoop(Ant& ant);
   
     std::vector<Node> ant_colony(std::vector<std::vector<int>>& grid,
                                  const Node& start, const Node& goal);
   
    private:
     std::vector<std::vector<int>> grid_;
     std::unordered_map<std::pair<int, int>, double, pair_hash> pheromone_edges_;
     int n_ants_, iterations_, max_steps_{}, grid_size_{};
     double alpha_, beta_, evap_rate_, Q_;
     Node start_, goal_;
     std::vector<Ant> ants_;
     std::vector<Node> motions_;
   };
   
   #endif  // ANT_COLONY_H
